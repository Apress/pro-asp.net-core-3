@page "{id}"
@model EditorModel

<h5 class="bg-primary text-white text-center p-2">Edit Role: @Model.Role.Name</h5>

<form method="post">
    <input type="hidden" name="rolename" value="@Model.Role.Name" />
    <div asp-validation-summary="All" class="text-danger"></div>
    <h5 class="bg-secondary text-white p-2">Members</h5>
    <table class="table table-sm table-striped table-bordered">
        <thead><tr><th>User</th><th>Email</th><th></th></tr></thead>
        <tbody>
            @if ((await Model.Members()).Count() == 0) {
                <tr><td colspan="3" class="text-center">No members</td></tr>
            }
            @foreach (IdentityUser user in await Model.Members()) {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>
                        <button asp-route-userid="@user.Id" 
                                class="btn btn-primary btn-sm" type="submit">
                            Change
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h5 class="bg-secondary text-white p-2">Non-Members</h5>
    <table class="table table-sm table-striped table-bordered">
        <thead><tr><th>User</th><th>Email</th><th></th></tr></thead>
        <tbody>
            @if ((await Model.NonMembers()).Count() == 0) {
                <tr><td colspan="3" class="text-center">No non-members</td></tr>
            }
            @foreach (IdentityUser user in await Model.NonMembers()) {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>
                        <button asp-route-userid="@user.Id" 
                            class="btn btn-primary btn-sm" type="submit">
                                Change
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</form>

<a class="btn btn-secondary" asp-page="list">Back</a>

@functions {

    public class EditorModel : AdminPageModel {
        public UserManager<IdentityUser> UserManager;
        public RoleManager<IdentityRole> RoleManager;

        public EditorModel(UserManager<IdentityUser> userManager,
                RoleManager<IdentityRole> roleManager) {
            UserManager = userManager;
            RoleManager = roleManager;
        }

        public IdentityRole Role { get; set; }

        public Task<IList<IdentityUser>> Members() =>
                UserManager.GetUsersInRoleAsync(Role.Name);

        public async Task<IEnumerable<IdentityUser>> NonMembers() =>
                UserManager.Users.ToList().Except(await Members());

        public async Task OnGetAsync(string id) {
            Role = await RoleManager.FindByIdAsync(id);
        }

        public async Task<IActionResult> OnPostAsync(string userid,
                string rolename) {
            Role = await RoleManager.FindByNameAsync(rolename);
            IdentityUser user = await UserManager.FindByIdAsync(userid);
            IdentityResult result;
            if (await UserManager.IsInRoleAsync(user, rolename)) {
                result = await UserManager.RemoveFromRoleAsync(user, rolename);
            } else {
                result = await UserManager.AddToRoleAsync(user, rolename);
            }
            if (result.Succeeded) {
                return RedirectToPage();
            } else {
                foreach (IdentityError err in result.Errors) {
                    ModelState.AddModelError("", err.Description);
                }
                return Page();
            }
        }
    }
}
